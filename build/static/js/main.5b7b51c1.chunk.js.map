{"version":3,"sources":["Header.js","requests.js","Nav.js","VideoCard.js","axios.js","Results.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","src","alt","API_KEY","fetchTrending","fetchTopRated","fetchActionMovies","fetchComedyMovies","fetchHorrorMovies","fetchRomanceMovies","fetchMystery","fetchSciFi","fetchWestern","fetchAnimation","fetchTV","Nav","setSelectedOption","onClick","requests","VideoCard","forwardRef","ref","movie","backdrop_path","poster_path","line","element","truncateText","text","overview","title","original_name","media_type","release_date","first_air_date","vote_count","instance","axios","create","baseURL","Results","selectedOption","useState","movies","setMovies","useEffect","a","get","request","data","results","fetchData","map","key","id","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5b7b51c1.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css';\n\nimport HomeIcon from '@material-ui/icons/Home';\nimport FlashOnIcon from '@material-ui/icons/FlashOn';\nimport LiveTvIcon from '@material-ui/icons/LiveTv';\nimport VideoLibraryIcon from '@material-ui/icons/VideoLibrary';\nimport SearchIcon from '@material-ui/icons/Search';\nimport PersonOutlineIcon from '@material-ui/icons/PersonOutline';\n\nconst Header = () => {\n    return (\n        <div className=\"header\">\n            {/* <h1>header</h1> */}\n            <div className=\"header__icons\">\n                <div className=\"header__icon header__icon--active\">\n                    <HomeIcon />\n                    <p>Home</p>\n                </div>\n                <div className=\"header__icon\">\n                    <FlashOnIcon />\n                    <p>Trending</p>\n                </div>\n                <div className=\"header__icon\">\n                    <LiveTvIcon />\n                    <p>Verified</p>\n                </div>\n                <div className=\"header__icon\">\n                    <VideoLibraryIcon />\n                    <p>Collections</p>\n                </div>\n                <div className=\"header__icon\">\n                    <SearchIcon />\n                    <p>Search</p>\n                </div>\n                <div className=\"header__icon\">\n                    <PersonOutlineIcon />\n                    <p>Account</p>\n                </div>\n            </div>\n            <img src=\"https://press.hulu.com/wp-content/uploads/2020/02/hulu-white.png\" alt=\"\" />\n        </div>\n    );\n};\n\nexport default Header;\n","// const API_KEY = '<YOUR_KEY>';\nconst API_KEY = 'b48ea4a688a9d8f286c89e50bf7e13c9';\n\n// e.g. https://api.themoviedb.org/3/trending/all/week?api_key=${API_KEY}&language=en-US\nexport default {\n    fetchTrending: `/trending/all/week?api_key=${API_KEY}&language=en-US`,\n    fetchTopRated: `/movie/top_rated?api_key=${API_KEY}&language=en-US`,\n    fetchActionMovies: `/discover/movie?api_key=${API_KEY}&with_genres=28`,\n    fetchComedyMovies: `/discover/movie?api_key=${API_KEY}&with_genres=35`,\n    fetchHorrorMovies: `/discover/movie?api_key=${API_KEY}&with_genres=27`,\n    fetchRomanceMovies: `/discover/movie?api_key=${API_KEY}&with_genres=10749`,\n    fetchMystery: `/discover/movie?api_key=${API_KEY}&with_genres=9648`,\n    fetchSciFi: `/discover/movie?api_key=${API_KEY}&with_genres=878`,\n    fetchWestern: `/discover/movie?api_key=${API_KEY}&with_genres=37`,\n    fetchAnimation: `/discover/movie?api_key=${API_KEY}&with_genres=16`,\n    fetchTV: `/discover/movie?api_key=${API_KEY}&with_genres=10770`,\n};\n\n// requests.fetchTrending\n","import React from 'react';\nimport './Nav.css';\nimport requests from './requests';\n\nconst Nav = ({ setSelectedOption }) => {\n    return (\n        <div className=\"nav\">\n            <h2 onClick={() => setSelectedOption(requests.fetchTrending)}>Trending</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchTopRated)}>Top Rated</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchActionMovies)}>Action</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchComedyMovies)}>Comedy</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchHorrorMovies)}>Horror</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchRomanceMovies)}>Romance</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchMystery)}>Mystery</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchSciFi)}>Sci-Fi</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchWestern)}>Western</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchAnimation)}>Animation</h2>\n            <h2 onClick={() => setSelectedOption(requests.fetchTV)}>TV Movie</h2>\n        </div>\n    );\n};\n\nexport default Nav;\n","import React, { forwardRef } from 'react';\nimport './VideoCard.css';\nimport TextTruncate from 'react-text-truncate';\n// import { ThumbUpSharp } from '@material-ui/icons';\nimport ThumbUpIcon from '@material-ui/icons/ThumbUp';\n\nconst base_url = 'https://image.tmdb.org/t/p/original/';\n// const VideoCard = (props) => {   // destructure\n\n// Comments from <VideoCard> components\n// src=\"https://kajabi-storefronts-production.global.ssl.fastly.net/kajabi-storefronts-production/themes/284832/settings_images/a3liO9nUSCyEhyiAnDOw_Profit-with-JavaScript-new.jpg\"\n\n//  <p>This film is about coding..</p>\n//  <h2>Movie title</h2>\n//  <p>Number of likes...</p>\n//  <p>{movie.overview}</p>\n\n// textTruncateChild={<a href=\"#\">Read on</a>}\nconst VideoCard = forwardRef(({ movie }, ref) => {\n    return (\n        <div ref={ref} className=\"videoCard\">\n            <img\n                src={`${base_url}${movie.backdrop_path || movie.poster_path}`}\n                alt=\"movie poster\"\n            />\n\n            <TextTruncate line={1} element=\"p\" truncateText=\"...\" text={movie.overview} />\n            <h2>{movie.title || movie.original_name}</h2>\n            <p className=\"videoCard__stats\">\n                {movie.media_type && `${movie.media_type} •`}\n                {movie.release_date || movie.first_air_date} •<span> </span>\n                <ThumbUpIcon />\n                <span> </span> {movie.vote_count}\n            </p>\n        </div>\n    );\n});\n\nexport default VideoCard;\n","import axios from 'axios';\n\n// base url to make requests to the movie db\n// e.g. https://api.themoviedb.org/3/trending/all/week?api_key=${API_KEY}&language=en-US\nconst instance = axios.create({\n    baseURL: 'https://api.themoviedb.org/3',\n});\n\nexport default instance;\n","import React, { useEffect, useState } from 'react';\nimport './Results.css';\nimport VideoCard from './VideoCard';\nimport axios from './axios';\n// import requests from './requests';\nimport FlipMove from 'react-flip-move';\n\nconst Results = ({ selectedOption }) => {\n    // const [movies, setMovies] = useState(['1', '2']);\n    const [movies, setMovies] = useState([]);\n\n    useEffect(() => {\n        // run this code EVERY time the Results component loads/ mounts\n        async function fetchData() {\n            // const request = await axios.get(requests.fetchActionMovies);\n            const request = await axios.get(selectedOption);\n            // console.log('REQUEST >>>', request);\n            setMovies(request.data.results);\n            return request;\n        }\n        fetchData();\n    }, [selectedOption]);\n\n    // if you pass a key in, it knows that this is the same component,\n    // i don't need to change that one or this one's changed i need to change that one\n    return (\n        <div className=\"results\">\n            <FlipMove>\n                {movies.map((movie) => (\n                    <VideoCard key={movie.id} movie={movie} />\n                ))}\n            </FlipMove>\n        </div>\n    );\n};\n\nexport default Results;\n","import React, { useState } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Nav from './Nav';\nimport Results from './Results';\nimport requests from './requests';\n\nfunction App() {\n    // const [selectedOption, setSelectedOption] = useState('');\n    const [selectedOption, setSelectedOption] = useState(requests.fetchTrending);\n    return (\n        <div className=\"app\">\n            {/* <h1>hulu</h1> */}\n            <Header />\n            <Nav setSelectedOption={setSelectedOption} />\n            <Results selectedOption={selectedOption} />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}